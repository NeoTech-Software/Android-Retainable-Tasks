<resources>
    <string name="app_name">Retainable Tasks Demo</string>

    <string name="toast_task_already_running">Task already running.</string>
    <string name="toast_task_finished">\'%1$s\' finished.</string>
    <string name="toast_task_canceled">\'%1$s\' canceled.</string>

    <string name="task_serial_1">Serial task #1</string>
    <string name="task_serial_2">Serial task #2</string>
    <string name="task_serial_3">Serial task #3</string>

    <string name="task_fragment_based">Start fragment based task</string>
    <string name="task_no_ui_callback">Task without UI callback</string>
    <string name="task_progress_dialog">Progress dialog task</string>
    <string name="task_retain_ui_state">Retain UI state task</string>

    <string name="dialog_progress_title">Loadingâ€¦</string>
    <string name="action_cancel">Cancel</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>

    <string name="text_fragment_task_manager_explanation">"This Activity has three Fragments, each Fragment extends the TaskFragment and has its own TaskManager instance.

        When you select another Fragment using the left drawer the current fragment will be detached, this means that any Task started using the Fragments TaskManger will only deliver its result when the Fragment is attached to the Activity again.

        Try it out! First press the button to start a new Task then select another Fragment.
        "</string>

    <string name="button_view_code">View code</string>
    <string name="button_start_demo">Start demo</string>

    <string name="menu_github">View on GitHub</string>


    <string name="demo_fragments_title">Fragment TaskManager</string>
    <string name="demo_fragments_description">"<![CDATA[This demonstration shows how individual Fragments use the <code>TaskManager</code> class to start and manage <code>Tasks</code>. Each Fragment extends from the <code>TaskFragmentCompat</code> class, which means that each Fragment has it's own <code>TaskManager</code> instance. <code>Task</code> results are only delivered to the Fragment if it is currently attached to the Activity.]]>"</string>

    <string name="demo_no_compat_title">Legacy Activity</string>
    <string name="demo_no_compat_description">"<![CDATA[This demonstration shows a <code>TaskActivity</code> implementation, the <code>TaskActivity</code> class extends a normal <code>android.app.Activity</code> and does not use the Android support libraries.<br><br><strong>Warning:</strong> because the legacy <code>Fragment</code> implementation lacks some important APIs, which are available through the support library but not available in the normal Android API, the library implementation and behaviour is slightly different. One of the most important differences is that a <code>Fragment</code> that uses its own <code>TaskManager</code> must have a tag in order to be used. It's recommended to use this library in combination with the Android support library.]]>"</string>

    <string name="demo_examples_title">Basic examples</string>
    <string name="demo_examples_description">"<![CDATA[This demonstration shows an Activity which extends the <code>TaskActivityCompat</code> class. It demonstrates how <code>Tasks</code> are started using the Activity's <code>TaskManager</code> and how <code>Tasks</code> are retained and attached to the UI after a configuration change.]]>"</string>

    <string name="demo_annotations_title">Annotations example</string>
    <string name="demo_annotations_description">"<![CDATA[This demonstration shows an Activity which extends <code>TaskActivityCompat</code> and uses Annotations to receive <code>Task</code> lifecycle events like <code>onPostExecute</code>.]]>"</string>


    <string name="demo_serial_title">Serial execution</string>
    <string name="demo_serial_description">"<![CDATA[By default <code>Tasks</code> are executed using a parallel Executor. This demonstration shows how <code>Tasks</code> can be executed in serial using the <code>TaskManager.execute(Task, Callback, Executor)</code> method.]]>"</string>

</resources>
